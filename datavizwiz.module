<?php

/**
 * Comment is published.
 */
define('DVW_TYPE_MAP_OPENLAYERS', 'MAP_OPENLAYERS');
define('DVW_TYPE_MAP_D3', 'MAP_D3');
define('DVW_TYPE_PIE_FLOT', 'PIE_FLOT');
define('DVW_TYPE_BAR_FLOT', 'BAR_FLOT');
define('DVW_TYPE_HTML', 'HTML');

define('DVW_SORT_SUMMARY', 0);
define('DVW_SORT_DETAIL', 1);

define('DVW_D3_BASEMAP_US_STATES', 'US_MAP');

define('DVW_FLAG_LATITUDE', 'LAT');
define('DVW_FLAG_LONGITUDE', 'LON');
define('DVW_FLAG_NONE', '');

define('DVW_OP_ADD', 0);
define('DVW_OP_EDIT', 1);
define('DVW_OP_DELETE', 2);

define('DVW_FILTER_NONE', '');
define('DVW_FILTER_TEXT', 'TEXT');
define('DVW_FILTER_DROPDOWN', 'DROPDOWN');
define('DVW_FILTER_CHECKBOXES', 'CHECKBOXES');


function theme_datavizwiz_detaildisplay($node) {
  $table_name = $node->field_dvw_datatable[0]['value'];
  $dataset_metadata = _datavizwiz_get_dataset_metadata($node->nid, array('*'));
  $importerID = $_GET['detail'];
  $output .= _datavizwiz_detail_page($dataset_metadata, $table_name, $importerID);

  return $output;
}

function theme_datavizwiz_summarypanes($node) {
    $summary_panes = _datavizwiz_get_summary_panes($node->nid);

  if (count($summary_panes) > 0) {
// First, display the tabs.
    $output .= '<div id="dvwPanes">';
    $output .= '<div id="dvwTabs">';
    $output .= '<ul class="dvwMenu">';
    $index = 0;
    $setActive = FALSE;
    foreach ($summary_panes as $pane) {
         // Sanitize $pane['name']. This is user input from
         // admin/datavizwiz/edit/%/summary_pane.
         $pane_name = check_plain($pane['name']);
         $output .= sprintf('<li class="dvwMenu"><a href="pane-%s">%s</a></li>', $index, $pane_name);     

      $index++;
    }
    $output .= '</ul>';
    $output .= '</div>';

    // Second, display the panes.
    $index = 0;
    $output .= '<div id="dvwTabContent" style="width: 100%; height: ' . $node->field_dvm_summary_pane_height[0]['value'] . 'px" class="dvwContent">';
    foreach ($summary_panes as $pane) {
      switch ($pane['type']) {
        case DVW_TYPE_MAP_OPENLAYERS:
          $content = _datavizwiz_pane_map_openlayers($node, $index, $pane['options']);
          break;
        case DVW_TYPE_MAP_D3:
          $content = _datavizwiz_pane_map_d3($node, $index, $pane['options']);
          break;
        case DVW_TYPE_PIE_FLOT:
          $content = _datavizwiz_pane_flot($node, $index, $pane['options'], DVW_TYPE_PIE_FLOT);
          break;
        case DVW_TYPE_BAR_FLOT:
          $content = _datavizwiz_pane_flot($node, $index, $pane['options'], DVW_TYPE_BAR_FLOT);
          break;
        case DVW_TYPE_HTML:
          $content = _datavizwiz_pane_html($node, $index, $pane['options']);
          break;
      }
      
            if (!$setActive) { 
              $output .= sprintf('<div id="pane-%s" class="dvwContent dvwActive" style="width: 100%%; height: ' . $node->field_dvm_summary_pane_height[0]['value'] . 'px">%s</div>', $index, $content);
              $setActive = TRUE;
      } else {
         $output .= sprintf('<div id="pane-%s" class="dvwContent" style="width: 100%%; height: ' . $node->field_dvm_summary_pane_height[0]['value'] . 'px">%s</div>', $index, $content);    
      }
      
      $index++;
    }
    $output .= '</div>';
  }
  $output .= '</div>';

  return $output;
}

function theme_datavizwiz_datafilters($node) {
  return drupal_get_form('datavizwiz_gen_filters', $node);;
}

/**
 * @param $form_state
 *
 * @param $node
 *  Node object. datavizwiz node.
 * 
 * @return $form
 *  Form API form array.
 */
function datavizwiz_gen_filters(&$form_state, $node) {
  $query = db_query("SELECT field_name, display_name, filter FROM {dvw_field_meta} WHERE nid=%s AND filter <> '' AND filter IS NOT NULL", $node->nid);
  
  // $rows is an array of fields marked as "filterable" for user-defined filtering.
  $rows = _datavizwiz_get_rowarray($query);
  
  foreach ($rows as $row) {
    $table_name = check_plain($node->field_dvw_datatable[0]['value']);
    $field_name = check_plain($row['field_name']);
    $display_name = check_plain($row['display_name']);
    switch ($row['filter']) {
      case DVW_FILTER_TEXT :
        $form[$row['field_name']] = array(
          '#type' => 'textfield', 
          '#title' => $display_name,
          '#value' => $field_name,
        );
        break;
      case DVW_FILTER_DROPDOWN :
        $options = _datavizwiz_get_unique_values($table_name, $field_name);
        $form[$field_name] = array(
          '#type' => 'select', 
          '#title' => $row['display_name'],
          '#value' => $_GET[$field_name],
          '#options' => $options,
        );
        break;
      case DVW_FILTER_CHECKBOXES :
        $options = _datavizwiz_get_unique_values($table_name, $field_name);
        $form[$field_name] = array(
          '#type' => 'checkboxes', 
          '#title' => $display_name,
        );
        break;
    }
  }
  
  $form['#method'] = "GET";
  $form['#token'] = FALSE;
  $form['#after_build'] = array('datavizwiz_gen_filters_unset_defaults');
  
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Filter'), 
    '#name' => '',
    '#weight' => 100,
    );
    
    return $form;
}

function datavizwiz_gen_filters_unset_defaults($form){
  unset($form['#build_id'], $form['form_build_id'], $form['form_id'], $form['op']);
  return $form;
}

function _datavizwiz_get_unique_values($datatable, $column) {
    $query = db_query("SELECT DISTINCT %s FROM {%s} ORDER BY %s", $column, $datatable, $column);
    $rows = _datavizwiz_get_rowarray($query);
    
    $returnrows[''] = '';
    foreach ($rows as $row) {
      $returnrows[$row[$column]] = $row[$column];
    }
    return $returnrows;
}

function theme_datavizwiz_opendatalinks($node) {
  
  // $icon_opendata = '<img src="' . drupal_get_path('module', 'datavizwiz') . '/images/opendata.png' . '"/> ';
  $icon_csv = '<img border="0" src="/' . drupal_get_path('module', 'datavizwiz') . '/images/csv.png' . '"/> ';
  $icon_geojson = '<img border="0" src="/' . drupal_get_path('module', 'datavizwiz') . '/images/geojson.png' . '"/> ';
  $icon_json = '<img border="0" src="/' . drupal_get_path('module', 'datavizwiz') . '/images/json.png' . '"/> ';
  $icon_xml = '<img border="0" src="/' . drupal_get_path('module', 'datavizwiz') . '/images/xml.png' . '"/> ';
  
  $link = sprintf('<a href="/dvwapi/%s/%s">', $node->nid, 'csv');
  $icon_csv = $link . $icon_csv . "</a>";
  
  $link = sprintf('<a href="/dvwapi/%s/%s">', $node->nid, 'geojson');
  $icon_geojson = $link . $icon_geojson . "</a>";
  
  $link = sprintf('<a href="/dvwapi/%s/%s">', $node->nid, 'json');
  $icon_json = $link . $icon_json . "</a>";
  
  $link = sprintf('<a href="/dvwapi/%s/%s">', $node->nid, 'xml');
  $icon_xml = $link . $icon_xml . "</a>";
  
  
  
  
  return $icon_csv . $icon_geojson . $icon_json . $icon_xml;
}

function theme_datavizwiz_datatable($node) {
  $table_name = $node->field_dvw_datatable[0]['value'];
  $dataset_metadata = _datavizwiz_get_dataset_metadata($node->nid, array('*'));
  $page_size = $node->field_dvw_pagesize[0]['value'];
  
  $query = sprintf("
      SELECT field_name, display_name, sortable 
      FROM {dvw_field_meta} 
      WHERE nid=%s AND visible_summary=1 
      ORDER BY weight_summary", $node->nid);
  $rows = _datavizwiz_get_rowarray(db_query($query));
  
  $filters = array();
  
  if (count($rows) > 0) {
    // Get headers for summary table
    $headers = array();
    $id_counter = 1;
    $column_names = '';
    foreach ($rows as $field) {
      $header = array();
      $header['data'] = $field['display_name'];
      $column_names .= $field['field_name'] . ',';

      if ($field['sortable'] == 1) {
        $header['field'] = $field['field_name'];
        $header['sort'] = 'asc';
      }

      $header['id'] = 'dvwcol' . $id_counter;
      array_push($headers, $header);
      $id_counter++;
    }

    $column_names = substr($column_names, 0, strlen($column_names) - 1);
    $sql = sprintf("SELECT ImporterID,%s FROM {%s}", $column_names, $table_name);
    $filterssql = _datavizwiz_get_where_clause_by_node_id($node->nid);
    $sql .= $filterssql;
    
    $sqlcount = sprintf("SELECT COUNT(ImporterID) FROM {%s}", $table_name);
    $sqlcount .= $filterssql;
    $recordcount = db_result(db_query($sqlcount));
    
    $sql .= tablesort_sql($headers);
    $query = pager_query($sql, $page_size);

    $tablerows = _datavizwiz_get_summaryarray($query);

    $output = '<div id="dvw-resultcount">Result count: ' . $recordcount . '</div>';
    $output .= theme_table($headers, $tablerows);
    $output .= theme('pager', NULL, 0);
  } else {
    if (user_access('adminster datavizwiz')) {
      drupal_set_message(t('This dataset has not yet been initatilzed.  Visit the "Edit Dataset" tab to define summary fields to display below.'), 'warning');
    }
  }

  return $output;
}

function _datavizwiz_get_where_clause_by_node_id($nid) {
  
  $query = sprintf("
      SELECT field_name, filter 
      FROM {dvw_field_meta} 
      WHERE nid=%s AND filter IS NOT NULL AND filter != ''", $nid);
  $rows = _datavizwiz_get_rowarray(db_query($query));
  
  $filters = array();
  
  foreach ($rows as $field) {
    if (isset($field['filter']) && strlen($field['filter'])) {
      $filters[$field['field_name']] = $field['filter'];
    }
  }
  
  $where = '';
  
  foreach ($filters as $filter => $type) {
    $variable = $_GET[$filter];
    if (isset($variable) && strlen($variable)) {
      if (!strlen($where)) {
        // If this is our first time adding a WHERE variable, let's setup the statement.
        // Otherwise, we pass back an empty WHERE string if there are no variables.
        $where .= ' WHERE (1=1)';
      }
      switch ($type) {
        case DVW_FILTER_TEXT :
          $where .= sprintf(" AND `%s` LIKE '%%%s%%'", $filter, $variable);
          break;
        case DVW_FILTER_DROPDOWN :
        case DVW_FILTER_CHECKBOXES :
          $where .= sprintf(" AND `%s`='%s'", $filter, $variable);
          break;
      }
    }
  }

  return $where;
}



function _datavizwiz_get_summary_panes($nid) {
  $query = "SELECT type, name, options FROM {dvw_summary_views} 
      WHERE nid=%s ORDER BY pane_order";
  $sql = db_query($query, $nid);
  $rows = _datavizwiz_get_rowarray($sql);
  return $rows;
}

/**
 * @param $node
 *  Node object.
 *
 * @param $index
 *  Integer. Pane order.
 *
 * @param $options 
 *  String. (Optional) JSON options for whatever pane is.
 * 
 * @return $output
 *  HTML
 */
function _datavizwiz_pane_map_openlayers($node, $index, $options = NULL) {
  drupal_add_js(drupal_get_path('module', 'datavizwiz') . '/libraries/mapping/openlayers/OpenLayers.js');
  drupal_add_css(drupal_get_path('module', 'datavizwiz') . '/libraries/mapping/openlayers/theme/default/style.css');
  
  $pane_id = 'dvwmap' . $index;
  if ($options) {
    $opts = json_decode($options);
  }

  $querystring = _datavizwiz_get_querystring();
  
   $output .= '<div id="' . $pane_id . '" style="width: 100%; height: ' . $node->field_dvm_summary_pane_height[0]['value'] . 'px"></div>';
   $script = '$(function() { var streets = new OpenLayers.Layer.XYZ(
    "MapBox Streets",
    [
        "http://a.tiles.mapbox.com/v3/mapbox.mapbox-streets/${z}/${x}/${y}.png",
        "http://b.tiles.mapbox.com/v3/mapbox.mapbox-streets/${z}/${x}/${y}.png",
        "http://c.tiles.mapbox.com/v3/mapbox.mapbox-streets/${z}/${x}/${y}.png",
        "http://d.tiles.mapbox.com/v3/mapbox.mapbox-streets/${z}/${x}/${y}.png"
    ], {
        sphericalMercator: true,
        wrapDateLine: true,
        transitionEffect: "resize",
        buffer: 1,
        numZoomLevels: 17
    }
  );

  var map = new OpenLayers.Map({
      div: "' . $pane_id . '",
      layers: [streets],
      projection: "EPSG:4326",
      zoom: 4,
      controls: [
          new OpenLayers.Control.Navigation({
              dragPanOptions: {
                  enableKinetic: true
              }
          }),
          new OpenLayers.Control.Attribution(),
          new OpenLayers.Control.Zoom()
      ]
  });

map.setCenter(
    new OpenLayers.LonLat(-98.35, 39.50).transform(
        new OpenLayers.Projection("EPSG:4326"),
        map.getProjectionObject()
    ), 4
);

  $.ajax({ url: "/dvwapi/'.$node->nid.'/geojson?'.$querystring.'", success: handleGeoJSON, dataType: "json" });

      function handleGeoJSON(geodata) {
        console.log(geodata);
        baseProjection = map.projection; 
        wgs84 = new OpenLayers.Projection("EPSG:4326");
                diff = new OpenLayers.Projection("EPSG:900913");
        var geojson_format = new OpenLayers.Format.GeoJSON({
    "externalProjection": wgs84,
    "internalProjection": diff
  });
        var vector_layer = new OpenLayers.Layer.Vector("Locations", {
          projection: "EPSG:4326",
          strategies: [
            new OpenLayers.Strategy.Cluster()
          ]
         }
        ); 
        map.addLayer(vector_layer);
        vector_layer.addFeatures(geojson_format.read(geodata));
        console.log(map);
      }
});
';
    
  // Sanitize $tablename, CCK input for good measure.
  $tablename = check_plain($node->field_dvw_datatable[0]['value']);
  $lat = $opts->latitude;
  $lon = $opts->longitude;
    
  drupal_add_js($script, 'inline');
  
  
  return $output;
}

function _datavizwiz_pane_map_d3($node, $index, $options) {
  drupal_add_js(drupal_get_path('module', 'datavizwiz') . '/libraries/d3.js');
  drupal_add_js(drupal_get_path('module', 'datavizwiz') . '/libraries/d3.geo.js');
  drupal_add_js(drupal_get_path('module', 'datavizwiz') . '/libraries/d3.quantize.js');  
  drupal_add_css(drupal_get_path('module', 'datavizwiz') . '/libraries/poverty.css');  
  

  $pane_id = 'dvwmap-' . $index;
  $opts = json_decode($options);
  
   $output .= '<div id="' . $pane_id . '" style="width: 100%; height: ' . $node->field_dvm_summary_pane_height[0]['value'] . 'px"></div>';
   //$pane_id = 'd3map';
   
    $script = "

    var data; // loaded asynchronously
      
$(function() {


      var path = d3.geo.path();

      var svg = d3.select('#" . $pane_id . "')
        .append('svg');

      var states = svg.append('g')
          .attr('id', 'states')
          .attr('class', 'JCols');

$('#svg').html('test');

      d3.json('/" . drupal_get_path('module', 'datavizwiz') . "/geodata/us-states.json', function(json) {
        states.selectAll('path')
            .data(json.features)
          .enter().append('path')
            .attr('class', data ? quantize : null)
            .attr('d', path);
      });
      
      d3.json('/dvwapi/" . $node->nid . "/d3json', function(json) {
        data = json;
        states.selectAll('path')
            .attr('class', quantize)

            .on('mouseover', function(){ 
          thisstate = d3.select(this);
          states.selectAll('path').attr('class',quantize3); 
          thisstate.attr('class',quantize); 
          svg.append('text')
            .attr('transform', 'translate(20,100)')
            .style('font-size','26px')
            .text( data[thisstate.property('__data__').id] + ' %' );
          svg.append('text')
            .attr('transform', 'translate(20,70)')
            .style('font-size','26px')
            .text( 'Poverty rate:' );
        })
            .on('mouseout', function(){
          svg.selectAll('text').text('');
          states.selectAll('path').attr('class',quantize); 
        });

});

";
    
  $tablename = $node->field_dvw_datatable[0]['value'];    
    
   $script .= '});';
    
  drupal_add_js($script, 'inline');
  
  
  return $output;
}

/**
 * @param $node
 *  Node object.
 *
 * @param $index
 *  Integer. Pane order.
 *
 * @param $options 
 *  String. (Optional) JSON options for whatever pane is.
 * 
 * @param $type
 *  String. Constant, either DVW_TYPE_BAR_FLOT or DVW_TYPE_PIE_FLOT.
 * 
 * @return $output
 *  HTML
 */
function _datavizwiz_pane_flot($node, $index, $options = NULL, $type) {
  drupal_add_js(drupal_get_path('module', 'datavizwiz') . '/libraries/charting/flot/jquery.flot.min.js');
  drupal_add_js(drupal_get_path('module', 'datavizwiz') . '/libraries/charting/flot/jquery.flot.pie.min.js');
  
  if ($options) {
    $opts = json_decode($options);
  }
  $variable = $opts->variable;
  $table_name = check_plain($node->field_dvw_datatable[0]['value']);
  $whereclause = _datavizwiz_get_where_clause_by_node_id($node->nid);
  
  $sql = sprintf('SELECT %s, Count(*) as SumTotal FROM %s %s group by %s ORDER BY SumTotal DESC', $variable, $table_name, $whereclause, $variable);
  $rows = _datavizwiz_get_rowarray(db_query($sql));
  
  $pane = 'dvwpane' . $index;

  if ($type == DVW_TYPE_PIE_FLOT) {
  foreach ($rows as $row) {
    $row_variable = check_plain($row[$variable]);
    $data .= '{label:"' . $row_variable . ' (' . $row["SumTotal"]  .')", data:' . $row["SumTotal"] . '},';
  }
  
  drupal_add_js('$(function() {
    $.plot($("#' . $pane .'"), [ ' . $data . ' ]
    , {
    series: { pie: { show: true } },
    legend: { show: true },
    grid: {
    clickable: true
    }
    }
    );
    } );

    ', 'inline');
  } else {
    // Type is DVW_TYPE_BAR_FLOT
    $tickcount=0;
    foreach ($rows as $row) {
      $row_variable = check_plain($row[$variable]);
      
      $data .= sprintf('[%s,%s],', $tickcount,$row["SumTotal"]);
   
      $ticks .= sprintf('[%s,"%s"],', $tickcount,$row_variable);
      $tickcount++;
    }
  
  drupal_add_js('$(function() {$.plot(
   $("#'. $pane .'"),
   [
    {
      label: "Total Things Per Year",
      data: [ ' . $data . ' ],
              color: "#00f",
      bars: {
        show: true,
        barWidth: 0.2,
        align: "center"
      }   
    }
 ],
 {
   xaxis: {
     ticks: [
'. $ticks .'
     ]
   }   
 }
);
});
', 'inline');
  }
  //return theme_table(array('One', 'Two'), $rows, array('id' => 'experiment'));

  return '<div id="' . $pane .'" style="width:100%;height:' . $node->field_dvm_summary_pane_height[0]['value'] . 'px"></div>
    <style type="text/css">div.legend table { width: 350px; } </style>
<div id=”initialPlaceHolder” style=”width:100%;height:' . $node->field_dvm_summary_pane_height[0]['value'] . 'px”></div>';
  
  
  return $output;
}

/**
 * @param $node
 *  Node object.
 *
 * @param $index
 *  Integer. Pane order.
 *
 * @param $options 
 *  HTML
 * 
 * @return $output
 *  HTML
 */
function _datavizwiz_pane_html($node, $index, $options) {
  return check_markup($options);
}

function datavizwiz_theme_registry_alter(&$theme_registry) {
  // Remove the first path under 'node' which is the one for the
  // module that created the template
  $template = 'node';
  $originalpath = array_shift($theme_registry[$template]['theme paths']);

  // Get the path to your module
  $modulepath = drupal_get_path('module', 'datavizwiz');

  // Stick the original path and then your module path back on top
  array_unshift($theme_registry[$template]['theme paths'], $originalpath, $modulepath);
}

/**
 * Implements hook_theme().
 */
function datavizwiz_theme() {
  return array(
    'datavizwiz_detaildisplay' => array(
      'arguments' => array('node' => NULL),
    ),
    'datavizwiz_summarypanes' => array(
      'arguments' => array('node' => NULL),
    ), 
    'datavizwiz_datafilters' => array(
      'arguments' => array('node' => NULL),
    ), 
    'datavizwiz_opendatalinks' => array(
      'arguments' => array('node' => NULL),
    ), 
    'datavizwiz_datatable' => array(
      'arguments' => array('node' => NULL),
    ),    
    'datavizwiz_fields_form' => array(
      'arguments' => array('form' => NULL),
    ),
    'datavizwiz_sort_summary_form' => array(
      'arguments' => array('form' => NULL),
    ),
    'datavizwiz_sort_detail_form' => array(
      'arguments' => array('form' => NULL),
    ),
    'datavizwiz_summary_panes_form' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

function datavizwiz_graph() {
  //return '';
  return _datavizwiz_experiment_pie_table();
}

function _datavizwiz_add_tabhtml() {
  return '<div class="tabs">
        <ul id="dvwTabs">
            <li class="active"><a href="#first">Map</a></li>
            <li><a href="#second">Pie</a></li>
            <li><a href="#third">Bar</a></li>
        </ul>
        <div id="dvwTabContent">
            <div id="first" class="dvwTab">
            <div id="datamap" style="height: 300px; width: 600px;"></div>
            </div>
            <div id="second" class="dvwTab" style="height: 300px; width: 600px;">' .
          _datavizwiz_experiment_pie_table() .
          '</div>
            <div id="third" class="dvwTab" style="height: 300px; width: 600px;">
                <h2>Third</h2>
                <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
            </div>
        </div>
    </div>';
}

function _datavizwiz_quick_json() {
  $options = array();
  $options['latitude-field'] = 'latitude';
  $options['longitude-field'] = 'longitude';
}

function _datavizwiz_add_javascript($markers) {
  $script = "        var map, layer, markers;

        function mapInit(){
            //OpenLayers.ProxyHost='/proxy/?url=';
            map = new OpenLayers.Map('datamap');
            
            layer = new OpenLayers.Layer.OSM( 'MapBox Layer', 'http://a.tiles.mapbox.com/v3/mapbox.world-bright/\${z}/\${x}/\${y}.png'  );
                
            
            map.addLayer(layer);

            markers = new OpenLayers.Layer.Markers('Markers');
            map.addLayer(markers);

            var size = new OpenLayers.Size(21,25);
            var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
            var icon = new OpenLayers.Icon('http://www.openlayers.org/dev/img/marker.png',size,offset);
            markers.addMarker(new OpenLayers.Marker(new OpenLayers.LonLat(-77.35, 39.50),icon));
            " . $markers . "

            map.addControl(new OpenLayers.Control.LayerSwitcher());

           map.setCenter(new OpenLayers.LonLat(-98.35, 39.50), 3);

        };
";
  drupal_add_js($script, 'inline');
}

/**
 * Implementation of hook_nodeapi().
 *
 * The module will add/modify the datavizwiz tables as nodes are inserted/updated.
 */
function datavizwiz_nodeapi(&$node, $op, $arg = NULL) {
  switch ($op) {
//    case 'load':
//      $node->private = db_result(db_query('SELECT private FROM {node_access_example} WHERE nid = %d', $node->nid));
//      break;
    case 'insert':
      if ($node->type == 'dvw_dataset') {
        $table_name = $node->field_dvw_datatable[0]['value'];
        $field_set = _datavizwiz_get_columns_in_table($table_name);

        _datavizwiz_add_columns_to_meta_table($node->nid, $field_set);
        //drupal_goto('datavizwiz/edit', $node->nid);
      }
      break;
//    case 'update':
//      db_query('UPDATE {node_access_example} SET private = %d WHERE nid = %d', $node->private, $node->nid);
//      break;
//    case 'delete':
//      db_query('DELETE FROM {node_access_example} WHERE nid = %d', $node->nid);
//      break;
  }
}

function datavizwiz_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#token'] == 'dvw_dataset_node_form' && $form_state['submitted'] == FALSE) {

    $tables = _datavizwiz_get_import_tables();
    $tablenames = array();
    foreach ($tables as $table) {
      array_push($tablenames, array($table['table_name'] => $table['table_name']));
    }


    // $form['field_dvw_datatable']['#type'] = 'select';
    // $form['field_dvw_datatable']['#options'] = $tablenames;
  }
}

/**
 * Implements hook_menu().
 */
function datavizwiz_menu() {
  $items['admin/datavizwiz/edit/%'] = array(
    'title' => 'Manage dataset',
    'page callback' => 'datavizwiz_tab_manage_fields',
    'access arguments' => array('access administration pages'),
    'file' => 'includes/datavizwiz.admin.inc',
    'type' => MENU_CALLBACK,
    'access callback'  => 'user_access',
    'access arguments' => array('adminster datavizwiz'),
    'page arguments' => array(3),
  );
  
  $items['node/%/dataset'] = array(
    'title' => 'Manage dataset',
    'page callback' => 'datavizwiz_redirect_admin',
    'page arguments' => array(2),
    'access arguments' => array('access administration pages'),
    'file' => 'includes/datavizwiz.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'access callback'  => '_datavizwiz_manage_dataset_menu_access', //special check to ensure node type = dvw_dataset
    'access arguments' => array(1),
    'weight' => 999,
  );
  
  $items['admin/datavizwiz/edit/%/fields'] = array(
    'title' => 'Manage fields',
    'page callback' => 'datavizwiz_tab_manage_fields',
    'page arguments' => array(3),
    'access arguments' => array('access administration pages'),
    'file' => 'includes/datavizwiz.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access callback'  => 'user_access',
    'access arguments' => array('adminster datavizwiz'),
    'weight' => -100,
  );

  $items['admin/datavizwiz/edit/%/sort_summary'] = array(
    'title' => 'Summary page',
    'page callback' => 'datavizwiz_tab_sort_summary',
    'page arguments' => array(3),
    'access arguments' => array('access administration pages'),
    'file' => 'includes/datavizwiz.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'access callback'  => 'user_access',
    'access arguments' => array('adminster datavizwiz'),
    'weight' => -80,
  );

  $items['admin/datavizwiz/edit/%/sort_detail'] = array(
    'title' => 'Detail page',
    'page callback' => 'datavizwiz_tab_sort_detail',
    'page arguments' => array(3),
    'access arguments' => array('access administration pages'),
    'file' => 'includes/datavizwiz.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'access callback'  => 'user_access',
    'access arguments' => array('adminster datavizwiz'),
    'weight' => -60,
  );
  
  $items['admin/datavizwiz/edit/%/summary_pane'] = array(
    'title' => 'Summary panes',
    'page callback' => 'datavizwiz_tab_summary_panes',
    'page arguments' => array(3),
    'file' => 'includes/datavizwiz.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'access callback'  => 'user_access',
    'access arguments' => array('adminster datavizwiz'),
    'weight' => -40,
  );
  
  $items['admin/datavizwiz/edit/%/summary_pane/%/%'] = array(
    'title' => 'Manage Dataset',
    'page callback' => 'datavizwiz_tab_summary_pane_edit',
    'access arguments' => array('access administration pages'),
    'file' => 'includes/datavizwiz.admin.inc',
    'type' => MENU_CALLBACK,
    'access callback'  => 'user_access',
    'access arguments' => array('adminster datavizwiz'),
    'page arguments' => array(3,5,6),
    'weight' => -20,
  );
  
  $items['admin/datavizwiz/edit/%/view'] = array(
    'title' => 'View dataset',
    'page callback' => 'datavizwiz_redirect_view',
    'page arguments' => array(3),
    'access arguments' => array('access administration pages'),
    'file' => 'includes/datavizwiz.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'access callback'  => 'user_access',
    'access arguments' => array('adminster datavizwiz'),
    'weight' => 100,
  );
  

 $items['dvwapi/%/%'] = array(
    'page callback' => 'datavizwiz_api',
    'page arguments' => array(1,2),
    'file' => 'includes/datavizwiz.api.inc',
    'type' => MENU_CALLBACK,
    'access callback'  => 'user_access',
    'access arguments' => array('adminster datavizwiz'),
  );  //TODO:  Add custom callback to check if published or if user has admin

  return $items;
}

function _datavizwiz_manage_dataset_menu_access($nid) {
  $node = node_load($nid);
  if (user_access('adminster datavizwiz') && $node->type == 'dvw_dataset' ) {
    return true;
  } else {
    return false;
  }
   
  
  return true;
}

function datavizwiz_perm() {
  return array('adminster datavizwiz');
}

function _datavizwiz_summary_table($nid, $table_name, $page_size) {

}

function _datavizwiz_detail_page($metadata, $table_name, $importerID) {  
  // Get headers for detail table
  $headers = array();
  $id_counter = 1;
  
  drupal_set_title('Detail Display');
  
  foreach ($metadata as $field) {
    $header = array();
    if ($field['visible_detail'] == 1) {
      $header['data'] = $field['field_name'];
      $header['display_name'] = $field['display_name'];
      $header['id'] = 'dvwcol' . $id_counter;
      array_push($headers, $header);
      $id_counter++;
    }
  }

  $column_names = '';
  // Get the column names we need
  foreach ($headers as $header) {
    $column_names .= $header['data'] . ',';
  }

  $column_names = substr($column_names, 0, strlen($column_names) - 1);
  $sql = sprintf("SELECT %s FROM {%s} WHERE ImporterID=%s", $column_names, $table_name, $importerID);


  $result = db_query(db_rewrite_sql($sql));
  if ($row = db_fetch_array($result)) {
    foreach ($row as $key => $value) {
      $column_name = '';
      foreach ($headers as $header) {
        if ($header['data'] == $key) {
          $column_name = $header['display_name'];
        }
      }
      
      // Sanitize $value, this is user-generated, uploaded in CSV file. 
      // We don't want to allow HTML, JS, etc.
      $value = check_plain($value);
      $output .= '<div class="dvwDetail"><strong>' . $column_name . '</strong><p>' . $value . '</p></div>';
    }
  }

  $output .= '<div style="clear: both"/>';
  
  return $output;
}

function _datavizwiz_experiment_pie_table() {
  $sql = db_query("SELECT AbsolutePriority, Count(*) as SumTotal FROM import_oii_2011_i3 group by AbsolutePriority");
  $rows = _datavizwiz_get_rowarray($sql);

  drupal_add_js(drupal_get_path('module', 'datavizwiz') . '/libraries/charting/flot/jquery.flot.min.js');
  drupal_add_js(drupal_get_path('module', 'datavizwiz') . '/libraries/charting/flot/jquery.flot.pie.min.js');




  foreach ($rows as $row) {
    $data .= '{label:"' . $row["AbsolutePriority"] . '", data:' . $row["SumTotal"] . '},';
  }


  drupal_add_js('$(function() {
    $.plot($("#placeholder"), [ ' . $data . ' ]
    , {
    series: { pie: { show: true } },
    legend: { show: true },
    grid: {
    clickable: true
    }
    }
    );
    } );

    ', 'inline');

  //return theme_table(array('One', 'Two'), $rows, array('id' => 'experiment'));

  return '<div id="placeholder" style="width:100%;height:300px"></div>
    <style type="text/css">div.legend table { width: 350px; } </style>
    <div style=”position: absolute; left: -2000px;”>
<div id=”initialPlaceHolder” style=”width:600px;height:300px”></div>
</div>';
}

function _datavizwiz_map($rows) {
  $markers .= sprintf("markers.addMarker(new OpenLayers.Marker(new OpenLayers.LonLat(%s,%s),icon.clone()));\n", $row['Longitude'], $row['Latitude']);
  _datavizwiz_add_javascript($markers);
}

function _datavizwiz_get_dataset_metadata($nid, $field_array) {
  $fields = implode(',', $field_array);
  $query = sprintf("SELECT %s FROM {dvw_field_meta} WHERE nid=%s", $fields, $nid);
  $sql = db_query($query);
  $rows = _datavizwiz_get_rowarray($sql);
  return $rows;
}

/**
 * Helper method to get columns in a table.  drupal_schema_fields_sql won't work as the imported
 * tables are not part of Drupal's schema.
 * 
 * @param type $table_name 
 */
function _datavizwiz_get_columns_in_table($table_name) {
  $dbname = _datavizwiz_get_database_name();
  
  // Run a query that will return no results to get the column names.
  $sql = db_query("SELECT column_name,ordinal_position,data_type 
    FROM {information_schema.columns}
    WHERE table_schema = '%s' and table_name like '{%s}'", $dbname, $table_name);
  
  return _datavizwiz_get_rowarray($sql);
}

function _datavizwiz_get_latlon_cols($nid) {
  $query = db_query("SELECT fid, field_name, flag
    FROM {dvw_field_meta} 
    WHERE nid=%s AND (flag='%s' OR flag='%s')"
    , $nid, DVW_FLAG_LATITUDE, DVW_FLAG_LONGITUDE);
  return _datavizwiz_get_rowarray($query);
}

function _datavizwiz_get_import_tables() {
  $dbname = _datavizwiz_get_database_name();
    
  // Run a query that will return no results to get the column names.
  $sql = db_query("SELECT table_name 
    FROM {information_schema.tables}
    WHERE table_schema = '%s' and table_name like 'import\_%'", $dbname);

  return _datavizwiz_get_rowarray($sql);
}

function _datavizwiz_get_rowarray($dbquery) {
  $rows = array();
  while ($row = db_fetch_array($dbquery)) {
    array_push($rows, $row);
  }

  return $rows;
}

function _datavizwiz_get_summaryarray($dbquery) {
  $rows = array();

  while ($row = db_fetch_array($dbquery)) {
    $importerID = $row['ImporterID'];
    $row = array_slice($row, 1, count($row) - 1, TRUE);
    $keys = array_keys($row);
    $first_cell = $keys[0];
    $row[$first_cell] = '<a href="?detail=' . $importerID . '">' . $row[$first_cell] . '</a>';
    array_push($rows, $row);
  }

  return $rows;
}

function _datavizwiz_add_columns_to_meta_table($nid, $fields) {
  $i = -30;
  foreach ($fields as $field) {
    $data = array(
      'nid' => $nid,
      'field_name' => $field['column_name'],
      'display_name' => $field['column_name'],
      'order_summary' => $i,
      'order_detail' => $i,
    );

    drupal_write_record('dvw_field_meta', $data);
    $i++;
  }
}

function _datavizwiz_get_database_name() {
  global $db_url;
  $db_name = explode("/",$db_url);
  $dbname = $db_name[count($db_name)-1];
  return $dbname;
}


// Taken from Drupal 7!!
function _datavizwiz_drupal_get_query_parameters(array $query = NULL, array $exclude = array('q'), $parent = '') {
  // Set defaults, if none given.
  if (!isset($query)) {
    $query = $_GET;
  }
  // If $exclude is empty, there is nothing to filter.
  if (empty($exclude)) {
    return $query;
  }
  elseif (!$parent) {
    $exclude = array_flip($exclude);
  }

  $params = array();
  foreach ($query as $key => $value) {
    $string_key = ($parent ? $parent . '[' . $key . ']' : $key);
    if (isset($exclude[$string_key])) {
      continue;
    }

    if (is_array($value)) {
      $params[$key] = drupal_get_query_parameters($value, $exclude, $string_key);
    }
    else {
      $params[$key] = $value;
    }
  }

  return $params;
}

function _datavizwiz_get_querystring() {
  $query_parameters = _datavizwiz_drupal_get_query_parameters();

  $querystring = "";
  foreach ($query_parameters as $param => $value) {
    if (isset($value) && strlen($value)) {
      $querystring .= '&' . $param . '=' . $value;
    }
  }

  return $querystring;
}
