<?php

/**
 * DataVizWiz types for the summary panes.
 */
define('DVW_TYPE_MAP_OPENLAYERS', 'MAP_OPENLAYERS');
define('DVW_TYPE_PIE_FLOT', 'PIE_FLOT');
define('DVW_TYPE_BAR_FLOT', 'BAR_FLOT');
define('DVW_TYPE_HTML', 'HTML');

/**
 * DataVizWiz types for sorting summary or detail.
 */
define('DVW_SORT_SUMMARY', 0);
define('DVW_SORT_DETAIL', 1);

/**
 * DataVizWiz types for field metadata.
 */
define('DVW_FLAG_LATITUDE', 'LAT');
define('DVW_FLAG_LONGITUDE', 'LON');
define('DVW_FLAG_NONE', '');

/**
 * DataVizWiz types for summary pane operations (add, edit, delete).
 */
define('DVW_OP_ADD', 0);
define('DVW_OP_EDIT', 1);
define('DVW_OP_DELETE', 2);

/**
 * DataVizWiz types for data filters.
 */
define('DVW_FILTER_NONE', '');
define('DVW_FILTER_TEXT', 'TEXT');
define('DVW_FILTER_DROPDOWN', 'DROPDOWN');
define('DVW_FILTER_CHECKBOXES', 'CHECKBOXES');

/**
 * DataVizWiz type for custom CCK node.
 */
define('DVW_NODE_TYPE', 'dvw_dataset');

/**
 * Theme function for the displaying the summary panes.
 * 
 * @param $node
 *  Node.  The data set we'll be displaying.
 * 
 * @return $output
 * String.  HTML of summary panes. 
 */
function theme_datavizwiz_summarypanes($node) {
  // Display only if node type is DataVizWiz data set custom CCK type.
  if ($node->type == DVW_NODE_TYPE) {
    $summary_panes = _datavizwiz_get_summary_panes($node->nid);

    if (count($summary_panes) > 0) {
  // First, display the tabs.
      $output .= '<div id="dvwPanes">';
      $output .= '<div id="dvwTabs">';
      $output .= '<ul class="dvwMenu">';
      $index = 0;
      $setActive = FALSE;
      foreach ($summary_panes as $pane) {
        // Sanitize $pane['name']. This is user input from
        // admin/datavizwiz/edit/%/summary_pane.
        $pane_name = check_plain($pane['name']);
        $output .= sprintf('<li class="dvwMenu"><a href="pane-%s">%s</a></li>', $index, $pane_name);
        $index++;
      }
      $output .= '</ul>';
      $output .= '</div>';

      // Second, display the panes.
      $index = 0;
      $output .= '<div id="dvwTabContent" style="width: 100%; height: ' . $node->field_dvm_summary_pane_height[0]['value'] . 'px" class="dvwContent">';
      foreach ($summary_panes as $pane) {
        switch ($pane['type']) {
          case DVW_TYPE_MAP_OPENLAYERS:
            $content = _datavizwiz_pane_map_openlayers($node, $index, $pane['svid'], $pane['options']);
            break;
          case DVW_TYPE_PIE_FLOT:
            $content = _datavizwiz_pane_flot($node, $index, $pane['options'], DVW_TYPE_PIE_FLOT);
            break;
          case DVW_TYPE_BAR_FLOT:
            $content = _datavizwiz_pane_flot($node, $index, $pane['options'], DVW_TYPE_BAR_FLOT);
            break;
          case DVW_TYPE_HTML:
            $content = _datavizwiz_pane_html($node, $index, $pane['options']);
            break;
        }

        if (!$setActive) { 
          $output .= sprintf('<div id="pane-%s" class="dvwContent dvwActive" style="width: 100%%; height: ' . $node->field_dvm_summary_pane_height[0]['value'] . 'px">%s</div>', $index, $content);
          $setActive = TRUE;
        } else {
          $output .= sprintf('<div id="pane-%s" class="dvwContent" style="width: 100%%; height: ' . $node->field_dvm_summary_pane_height[0]['value'] . 'px">%s</div>', $index, $content);    
        }

        $index++;
      }
      $output .= '</div>';
    }
    $output .= '</div>';    
  } else {
    
  }
  return $output;
}

/**
 * Theme function for the data filters as defined by user in admin.
 * 
 * @param $node
 *  Node.  The data set we'll be displaying.
 * 
 * @return $output
 * String.  HTML of the data filters. 
 */
function theme_datavizwiz_datafilters($node) {
  // Display only if node type is DataVizWiz data set custom CCK type.
  if ($node->type == DVW_NODE_TYPE) {
    return drupal_get_form('datavizwiz_gen_filters', $node);
  } else {
    return '';
  }
}

/**
 * Theme function for the data table displayed on the summary page.
 * 
 * @param $node
 *  Node.  The data set we'll be displaying.
 * 
 * @return $output
 * String.  HTML of the open data icons. 
 */
function theme_datavizwiz_opendatalinks($node) {
    // Display only if node type is DataVizWiz data set custom CCK type.
  if ($node->type == DVW_NODE_TYPE) {
    if ($node->field_dvw_download_csv[0]['value'] == 1) {
      $icon_csv = '<img border="0" src="/' . drupal_get_path('module', 'datavizwiz') . '/images/csv.png' . '"/> ';
      $link = sprintf('<a href="/dvwapi/%s/%s">', $node->nid, 'csv');
      $icon_csv = $link . $icon_csv . "</a>";
    }

    if ($node->field_dvw_download_geojson[0]['value'] == 1) {
      $icon_geojson = '<img border="0" src="/' . drupal_get_path('module', 'datavizwiz') . '/images/geojson.png' . '"/> ';
      $link = sprintf('<a href="/dvwapi/%s/%s">', $node->nid, 'geojson');
      $icon_geojson = $link . $icon_geojson . "</a>";
    }

    if ($node->field_dvw_download_json[0]['value'] == 1) {
      $icon_json = '<img border="0" src="/' . drupal_get_path('module', 'datavizwiz') . '/images/json.png' . '"/> ';
      $link = sprintf('<a href="/dvwapi/%s/%s">', $node->nid, 'json');
      $icon_json = $link . $icon_json . "</a>";
    }

    if ($node->field_dvw_download_xml[0]['value'] == 1) {
      $icon_xml = '<img border="0" src="/' . drupal_get_path('module', 'datavizwiz') . '/images/xml.png' . '"/> ';
      $link = sprintf('<a href="/dvwapi/%s/%s">', $node->nid, 'xml');
      $icon_xml = $link . $icon_xml . "</a>";
    }
  }
  
  
  
  return $icon_csv . $icon_geojson . $icon_json . $icon_xml;
}

/**
 * Theme function for the data table displayed on the summary page.
 * 
 * @param $node
 *  Node.  The data set we'll be displaying.
 * 
 * @return $output
 *  String.  HTML of the summary data table. 
 */
function theme_datavizwiz_datatable($node) {
  // Display only if node type is DataVizWiz data set custom CCK type.
  if ($node->type == DVW_NODE_TYPE) {
    $table_name = $node->field_dvw_datatable[0]['value'];
    $dataset_metadata = _datavizwiz_get_dataset_metadata($node->nid, array('*'));
    $page_size = $node->field_dvw_pagesize[0]['value'];

    $query = sprintf("
        SELECT field_name, display_name, sortable 
        FROM {dvw_field_meta} 
        WHERE nid=%s AND visible_summary=1 
        ORDER BY weight_summary", $node->nid);
    $rows = _datavizwiz_get_rowarray(db_query($query));

    $filters = array();

    if (count($rows) > 0) {
      // Get headers for summary table
      $headers = array();
      $id_counter = 1;
      $column_names = '';
      foreach ($rows as $field) {
        $header = array();
        $header['data'] = $field['display_name'];
        $column_names .= $field['field_name'] . ',';

        if ($field['sortable'] == 1) {
          $header['field'] = $field['field_name'];
          $header['sort'] = 'asc';
        }

        $header['id'] = 'dvwcol' . $id_counter;
        array_push($headers, $header);
        $id_counter++;
      }

      $column_names = substr($column_names, 0, strlen($column_names) - 1);
      $sql = sprintf("SELECT ImporterID,%s FROM {%s}", $column_names, $table_name);
      $filterssql = _datavizwiz_get_where_clause_by_node_id($node->nid);
      $sql .= $filterssql;

      $sqlcount = sprintf("SELECT COUNT(ImporterID) FROM {%s}", $table_name);
      $sqlcount .= $filterssql;
      $recordcount = db_result(db_query($sqlcount));

      $sql .= tablesort_sql($headers);
      $query = pager_query($sql, $page_size);

      $tablerows = _datavizwiz_get_summaryarray($query);

      $output = '<div id="dvw-resultcount">Result count: ' . $recordcount . '</div>';
      $output .= theme_table($headers, $tablerows);
      $output .= theme('pager', NULL, 0);
    } else {
      if (user_access('adminster datavizwiz')) {
        drupal_set_message(t('This dataset has not yet been initatilzed.  Visit the "Edit Dataset" tab to define summary fields to display below.'), 'warning');
      }
    }
  }

  return $output;
}

/**
 * Theme function for the displaying the detail page.
 * 
 * @param $node
 *  Node.  The data set we'll be displaying.
 * 
 * @return $output
 * String.  HTML of detail page. 
 */
function theme_datavizwiz_detaildisplay($node) {
    // Display only if node type is DataVizWiz data set custom CCK type.
  if ($node->type == DVW_NODE_TYPE) {
    $table_name = $node->field_dvw_datatable[0]['value'];
    $dataset_metadata = _datavizwiz_get_dataset_metadata($node->nid, array('*'));
    $importerID = $_GET['detail'];
    if (is_numeric($importerID)) {
      $output .= _datavizwiz_detail_page($dataset_metadata, $table_name, $importerID);
    }
  }
  
  return $output;
}

/**
 * @param $form_state
 *
 * @param $node
 *  Node object. datavizwiz node.
 * 
 * @return $form
 *  Form API form array.
 */
function datavizwiz_gen_filters(&$form_state, $node) {
  $query = db_query("SELECT field_name, display_name, filter FROM {dvw_field_meta} WHERE nid=%s AND filter <> '' AND filter IS NOT NULL", $node->nid);
  
  // $rows is an array of fields marked as "filterable" for user-defined filtering.
  $rows = _datavizwiz_get_rowarray($query);
  
  foreach ($rows as $row) {
    $table_name = check_plain($node->field_dvw_datatable[0]['value']);
    $field_name = check_plain($row['field_name']);
    $display_name = check_plain($row['display_name']);
    switch ($row['filter']) {
      case DVW_FILTER_TEXT :
        $form[$row['field_name']] = array(
          '#type' => 'textfield', 
          '#title' => $display_name,
        );
        break;
      case DVW_FILTER_DROPDOWN :
        $options = _datavizwiz_get_unique_values($table_name, $field_name);
        $form[$field_name] = array(
          '#type' => 'select', 
          '#title' => $display_name,
          '#value' => $_GET[$field_name],
          '#options' => $options,
        );
        break;
      case DVW_FILTER_CHECKBOXES :
        $options = _datavizwiz_get_unique_values($table_name, $field_name);
        $form[$field_name] = array(
          '#type' => 'checkboxes', 
          '#title' => $display_name,
        );
        break;
    }
  }
  
  $form['#method'] = "GET";
  $form['#token'] = FALSE;
  $form['#after_build'] = array('datavizwiz_gen_filters_unset_defaults');
  
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Filter'), 
    '#name' => '',
    '#weight' => 100,
    );
    
    return $form;
}

function datavizwiz_gen_filters_unset_defaults($form){
  unset($form['#build_id'], $form['form_build_id'], $form['form_id'], $form['op']);
  return $form;
}

function _datavizwiz_get_unique_values($datatable, $column) {
    $query = db_query("SELECT DISTINCT %s FROM {%s} ORDER BY %s", $column, $datatable, $column);
    $rows = _datavizwiz_get_rowarray($query);
    
    $returnrows[''] = '';
    foreach ($rows as $row) {
      $returnrows[$row[$column]] = $row[$column];
    }
    return $returnrows;
}

/**
 * Generates a dynamic WHERE clause from querystring parameters.
 * User defines which fields are filterable for each node, so
 * WHERE clause can contain columns in which the end user has specified.
 * This method is used for summary panes (maps/graphs), summary table and
 * downloadable data/API.
 * 
 * @param $nid
 *  Integer.  Node ID.
 * 
 * @return $where.
 *  String.  WHERE clause. 
 */
function _datavizwiz_get_where_clause_by_node_id($nid) {
  
  $query = sprintf("
      SELECT field_name, filter 
      FROM {dvw_field_meta} 
      WHERE nid=%s AND filter IS NOT NULL AND filter != ''", $nid);
  $rows = _datavizwiz_get_rowarray(db_query($query));
  
  $filters = array();
  
  foreach ($rows as $field) {
    if (isset($field['filter']) && strlen($field['filter'])) {
      $filters[$field['field_name']] = $field['filter'];
    }
  }
  
  $where = '';
  
  foreach ($filters as $filter => $type) {
    $variable = $_GET[$filter];
    // Sanitize user input.
    $variable = check_plain($variable);
    
    if (isset($variable) && strlen($variable)) {
      if (!strlen($where)) {
        // If this is our first time adding a WHERE variable, let's setup the statement.
        // Otherwise, we pass back an empty WHERE string if there are no variables.
        // WHERE (1=1) is used because it provides a string which can be appended
        // to easily by adding an AND and the filter condition.
        $where .= ' WHERE (1=1)';
      }
      switch ($type) {
        case DVW_FILTER_TEXT :
          // If this is a text filter, add a LIKE statement with % wildcards.
          $where .= sprintf(" AND `%s` LIKE '%%%s%%'", $filter, $variable);
          break;
        case DVW_FILTER_DROPDOWN :
        case DVW_FILTER_CHECKBOXES :
          // If this is a dropdown or checkbox filter, add an EQUALS statement
          $where .= sprintf(" AND `%s`='%s'", $filter, $variable);
          break;
      }
    }
  }

  return $where;
}

/**
 * Return the summary panes as defined by the user for a dataset.
 * 
 * @param $nid
 *  Integer. Node ID.
 *
 * @return $rows
 *  Array.  Information about summary panes.
 */
function _datavizwiz_get_summary_panes($nid) {
  $query = "SELECT svid, type, name, options FROM {dvw_summary_views} 
      WHERE nid=%s ORDER BY pane_order";
  $sql = db_query($query, $nid);
  $rows = _datavizwiz_get_rowarray($sql);
  return $rows;
}

/**
 * Outputs content for summary pane type OpenLayers maps.
 * 
 * @param $node
 *  Node object.
 *
 * @param $index
 *  Integer. Pane order.
 *
 * @param $svid
 *  Integer. Summary ID from database.
 *
 * @param $options 
 *  String. (Optional) JSON array of options as defined by user in admin.
 * 
 * @return $output
 *  HTML
 */
function _datavizwiz_pane_map_openlayers($node, $index, $svid, $options = NULL) {
  drupal_add_js(drupal_get_path('module', 'datavizwiz') . '/libraries/mapping/openlayers/OpenLayers.js');
  drupal_add_js(drupal_get_path('module', 'datavizwiz') . '/scripts/datavizwiz_openlayers.js');  
  drupal_add_css(drupal_get_path('module', 'datavizwiz') . '/libraries/mapping/openlayers/theme/default/style.css');
  
  $pane_id = 'dvwmap' . $index;
  if ($options) {
    $opts = json_decode($options);
  }

  $querystring = _datavizwiz_get_querystring();
  
  $output .= '<div id="' . $pane_id . '" style="width: 100%; height: ' . $node->field_dvm_summary_pane_height[0]['value'] . 'px"></div>
<div id="dvw-infobox"></div>     
';
    
  // Sanitize $tablename, CCK input for good measure.
  $tablename = check_plain($node->field_dvw_datatable[0]['value']);
  $lat = $opts->latitude;
  $lon = $opts->longitude;
  
  // Pass along the summary pane ID so GeoJSON API can pick out the title field.
  $querystring .= '&ol_id=' . $svid;
  
  $geoDataURL = "/dvwapi/".$node->nid."/geojson?".$querystring;
  $script = "$(function() { initOpenLayersMap('" . $pane_id . "','" . $geoDataURL . "') });";
  drupal_add_js($script, 'inline');
  
  return $output;
}

/**
 * Outputs content for summary pane type flot graphs.
 * 
 * @param $node
 *  Node object.
 *
 * @param $index
 *  Integer. Pane order.
 *
 * @param $options 
 *  String. (Optional) JSON array of options as defined by user in admin.
 * 
 * @param $type
 *  String. Constant, either DVW_TYPE_BAR_FLOT or DVW_TYPE_PIE_FLOT.
 * 
 * @return $output
 *  HTML
 */
function _datavizwiz_pane_flot($node, $index, $options = NULL, $type) {
  drupal_add_js(drupal_get_path('module', 'datavizwiz') . '/libraries/charting/flot/jquery.flot.min.js');
  drupal_add_js(drupal_get_path('module', 'datavizwiz') . '/libraries/charting/flot/jquery.flot.pie.min.js');
  
  if ($options) {
    $opts = json_decode($options);
  }
  $variable = $opts->variable;
  $table_name = check_plain($node->field_dvw_datatable[0]['value']);
  $whereclause = _datavizwiz_get_where_clause_by_node_id($node->nid);
  
  $sql = sprintf('SELECT %s, Count(*) as SumTotal FROM %s %s group by %s ORDER BY SumTotal DESC', $variable, $table_name, $whereclause, $variable);
  $rows = _datavizwiz_get_rowarray(db_query($sql));
  
  $pane = 'dvwpane' . $index;
  
  // The user will specify a variable to display in the graph.  Below will grab
  // the user specified "display name" from the metadata table.
  $rows_metadata = _datavizwiz_get_dataset_metadata($node->nid, array('field_name', 'display_name'));
  foreach ($rows_metadata as $row_metadata) {
    if ($row_metadata['field_name'] == $variable) {
      $variable_displayname = check_plain($row_metadata['display_name']);
    }
  }

  if ($type == DVW_TYPE_PIE_FLOT) {
    $color_scale = array('#F7FBFF','#DEEBF7','#C6DBEF','#9ECAE1','#6BAED6','#4292C6','#2171B5','#08519C','#08306B');
    $scale_counter = 0;
    $scale_max = count($color_scale) - 1;
    // Let's start in the higher end of the scale (darker colors) if less then the scale max;
    if (count($rows) < $scale_max) {
      $scale_counter = $scale_max - count($rows);
    }
    
    foreach ($rows as $row) {
      $row_variable = check_plain($row[$variable]);
      $data .= sprintf('{label:"%s (%s)", data:%s, color:"%s"},', $row_variable, $row["SumTotal"], $row["SumTotal"], $color_scale[$scale_counter]);
      if ($scale_counter == $scale_max) {
        $scale_counter = 0;
      } else {
        $scale_counter++;
      }
    }

    drupal_add_js('$(function() {
      $.plot($("#' . $pane .'"), [ ' . $data . ' ]
      , {
      series: { pie: { show: true } },
      legend: { show: true },
      grid: {
      clickable: true
      }
      }
      );
      } );

      ', 'inline');
    } else {
      // Type is DVW_TYPE_BAR_FLOT
      $tickcount=0;
      foreach ($rows as $row) {
        $row_variable = check_plain($row[$variable]);

        $data .= sprintf('[%s,%s],', $tickcount,$row["SumTotal"]);

        $ticks .= sprintf('[%s,"%s"],', $tickcount,$row_variable);
        $tickcount++;
      }

    drupal_add_js('$(function() {$.plot(
    $("#'. $pane .'"),
    [
      { label: "' . $variable_displayname . '",
        data: [ ' . $data . ' ], 
        color: "#08519C",
        bars: { show: true, barWidth: 0.2, align: "center" }   
      }
    ],
    { xaxis: { ticks: [ '. $ticks .' ] } }
    );
    });
    ', 'inline');
  }

  return '<div id="' . $pane .'" style="width:100%;height:' . $node->field_dvm_summary_pane_height[0]['value'] . 'px"></div>
    <style type="text/css">div.legend table { width: 350px; } </style>
<div id=”initialPlaceHolder” style=”width:100%;height:' . $node->field_dvm_summary_pane_height[0]['value'] . 'px”></div>';
  
  
  return $output;
}

/**
 * Outputs content for summary pane type freeform HTML.
 * 
 * @param $node
 *  Node object.
 *
 * @param $index
 *  Integer. Pane order.
 *
 * @param $options 
 *  User defined HTML.
 * 
 * @return $output
 *  HTML
 */
function _datavizwiz_pane_html($node, $index, $options) {
  return check_markup($options);
}

function datavizwiz_theme_registry_alter(&$theme_registry) {
  // Remove the first path under 'node' which is the one for the
  // module that created the template
  $template = 'node';
  $originalpath = array_shift($theme_registry[$template]['theme paths']);

  // Get the path to your module
  $modulepath = drupal_get_path('module', 'datavizwiz');

  // Stick the original path and then your module path back on top
  array_unshift($theme_registry[$template]['theme paths'], $originalpath, $modulepath);
}

/**
 * Implements hook_theme().
 */
function datavizwiz_theme() {
  return array(
    'datavizwiz_detaildisplay' => array(
      'arguments' => array('node' => NULL),
    ),
    'datavizwiz_summarypanes' => array(
      'arguments' => array('node' => NULL),
    ), 
    'datavizwiz_datafilters' => array(
      'arguments' => array('node' => NULL),
    ), 
    'datavizwiz_opendatalinks' => array(
      'arguments' => array('node' => NULL),
    ), 
    'datavizwiz_datatable' => array(
      'arguments' => array('node' => NULL),
    ),    
    'datavizwiz_fields_form' => array(
      'arguments' => array('form' => NULL),
    ),
    'datavizwiz_sort_summary_form' => array(
      'arguments' => array('form' => NULL),
    ),
    'datavizwiz_sort_detail_form' => array(
      'arguments' => array('form' => NULL),
    ),
    'datavizwiz_summary_panes_form' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

function datavizwiz_graph() {
  //return '';
  return _datavizwiz_experiment_pie_table();
}

function _datavizwiz_add_tabhtml() {
  return '<div class="tabs">
        <ul id="dvwTabs">
            <li class="active"><a href="#first">Map</a></li>
            <li><a href="#second">Pie</a></li>
            <li><a href="#third">Bar</a></li>
        </ul>
        <div id="dvwTabContent">
            <div id="first" class="dvwTab">
            <div id="datamap" style="height: 300px; width: 600px;"></div>
            </div>
            <div id="second" class="dvwTab" style="height: 300px; width: 600px;">' .
          _datavizwiz_experiment_pie_table() .
          '</div>
            <div id="third" class="dvwTab" style="height: 300px; width: 600px;">
                <h2>Third</h2>
                <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
            </div>
        </div>
    </div>';
}

function _datavizwiz_add_javascript($markers) {
  $script = "        var map, layer, markers;

        function mapInit(){
            //OpenLayers.ProxyHost='/proxy/?url=';
            map = new OpenLayers.Map('datamap');
            
            layer = new OpenLayers.Layer.OSM( 'MapBox Layer', 'http://a.tiles.mapbox.com/v3/mapbox.world-bright/\${z}/\${x}/\${y}.png'  );
                
            
            map.addLayer(layer);

            markers = new OpenLayers.Layer.Markers('Markers');
            map.addLayer(markers);

            var size = new OpenLayers.Size(21,25);
            var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
            var icon = new OpenLayers.Icon('http://www.openlayers.org/dev/img/marker.png',size,offset);
            markers.addMarker(new OpenLayers.Marker(new OpenLayers.LonLat(-77.35, 39.50),icon));
            " . $markers . "

            map.addControl(new OpenLayers.Control.LayerSwitcher());

           map.setCenter(new OpenLayers.LonLat(-98.35, 39.50), 3);

        };
";
  drupal_add_js($script, 'inline');
}

/**
 * Implementation of hook_nodeapi().
 *
 * The module will add/modify the datavizwiz tables as nodes are inserted/updated.
 */
function datavizwiz_nodeapi(&$node, $op, $arg = NULL) {
  switch ($op) {
//    case 'load':
//      $node->private = db_result(db_query('SELECT private FROM {node_access_example} WHERE nid = %d', $node->nid));
//      break;
    case 'insert':
      if ($node->type == 'dvw_dataset') {
        $table_name = $node->field_dvw_datatable[0]['value'];
        $field_set = _datavizwiz_get_columns_in_table($table_name);

        _datavizwiz_add_columns_to_meta_table($node->nid, $field_set);
        //drupal_goto('datavizwiz/edit', $node->nid);
      }
      break;
//    case 'update':
//      db_query('UPDATE {node_access_example} SET private = %d WHERE nid = %d', $node->private, $node->nid);
//      break;
//    case 'delete':
//      db_query('DELETE FROM {node_access_example} WHERE nid = %d', $node->nid);
//      break;
  }
}

function datavizwiz_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#token'] == 'dvw_dataset_node_form' && $form_state['submitted'] == FALSE) {

    $tables = _datavizwiz_get_import_tables();
    $tablenames = array();
    foreach ($tables as $table) {
      array_push($tablenames, array($table['table_name'] => $table['table_name']));
    }


    // $form['field_dvw_datatable']['#type'] = 'select';
    // $form['field_dvw_datatable']['#options'] = $tablenames;
  }
}

/**
 * Implements hook_menu().
 */
function datavizwiz_menu() {
  $items['admin/datavizwiz/edit/%'] = array(
    'title' => 'Manage dataset',
    'page callback' => 'datavizwiz_tab_manage_fields',
    'access arguments' => array('access administration pages'),
    'file' => 'includes/datavizwiz.admin.inc',
    'type' => MENU_CALLBACK,
    'access callback'  => 'user_access',
    'access arguments' => array('adminster datavizwiz'),
    'page arguments' => array(3),
  );
  
  $items['node/%/dataset'] = array(
    'title' => 'Manage dataset',
    'page callback' => 'datavizwiz_redirect_admin',
    'page arguments' => array(2),
    'access arguments' => array('access administration pages'),
    'file' => 'includes/datavizwiz.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'access callback'  => '_datavizwiz_manage_dataset_menu_access', //special check to ensure node type = dvw_dataset
    'access arguments' => array(1),
    'weight' => 999,
  );
  
  $items['admin/datavizwiz/edit/%/fields'] = array(
    'title' => 'Manage fields',
    'page callback' => 'datavizwiz_tab_manage_fields',
    'page arguments' => array(3),
    'access arguments' => array('access administration pages'),
    'file' => 'includes/datavizwiz.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access callback'  => 'user_access',
    'access arguments' => array('adminster datavizwiz'),
    'weight' => -100,
  );

  $items['admin/datavizwiz/edit/%/sort_summary'] = array(
    'title' => 'Summary page',
    'page callback' => 'datavizwiz_tab_sort_summary',
    'page arguments' => array(3),
    'access arguments' => array('access administration pages'),
    'file' => 'includes/datavizwiz.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'access callback'  => 'user_access',
    'access arguments' => array('adminster datavizwiz'),
    'weight' => -80,
  );

  $items['admin/datavizwiz/edit/%/sort_detail'] = array(
    'title' => 'Detail page',
    'page callback' => 'datavizwiz_tab_sort_detail',
    'page arguments' => array(3),
    'access arguments' => array('access administration pages'),
    'file' => 'includes/datavizwiz.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'access callback'  => 'user_access',
    'access arguments' => array('adminster datavizwiz'),
    'weight' => -60,
  );
  
  $items['admin/datavizwiz/edit/%/summary_pane'] = array(
    'title' => 'Summary panes',
    'page callback' => 'datavizwiz_tab_summary_panes',
    'page arguments' => array(3),
    'file' => 'includes/datavizwiz.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'access callback'  => 'user_access',
    'access arguments' => array('adminster datavizwiz'),
    'weight' => -40,
  );
  
  $items['admin/datavizwiz/edit/%/summary_pane/%/%'] = array(
    'title' => 'Manage Dataset',
    'page callback' => 'datavizwiz_tab_summary_pane_edit',
    'access arguments' => array('access administration pages'),
    'file' => 'includes/datavizwiz.admin.inc',
    'type' => MENU_CALLBACK,
    'access callback'  => 'user_access',
    'access arguments' => array('adminster datavizwiz'),
    'page arguments' => array(3,5,6),
    'weight' => -20,
  );
  
  $items['admin/datavizwiz/edit/%/view'] = array(
    'title' => 'View dataset',
    'page callback' => 'datavizwiz_redirect_view',
    'page arguments' => array(3),
    'access arguments' => array('access administration pages'),
    'file' => 'includes/datavizwiz.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'access callback'  => 'user_access',
    'access arguments' => array('adminster datavizwiz'),
    'weight' => 100,
  );
  

 $items['dvwapi/%/%'] = array(
    'page callback' => 'datavizwiz_api',
    'page arguments' => array(1,2),
    'file' => 'includes/datavizwiz.api.inc',
    'type' => MENU_CALLBACK,
    'access callback'  => 'user_access',
    'access arguments' => array('adminster datavizwiz'),
  );  //TODO:  Add custom callback to check if published or if user has admin

  return $items;
}

function _datavizwiz_manage_dataset_menu_access($nid) {
  $node = node_load($nid);
  if (user_access('adminster datavizwiz') && $node->type == 'dvw_dataset' ) {
    return true;
  } else {
    return false;
  }
   
  
  return true;
}

function datavizwiz_perm() {
  return array('adminster datavizwiz');
}

function _datavizwiz_summary_table($nid, $table_name, $page_size) {

}

function _datavizwiz_detail_page($metadata, $table_name, $importerID) {  
  // Get headers for detail table
  $headers = array();
  $id_counter = 1;
 
  $title = '';
  $subtitle = '';
  
  foreach ($metadata as $field) {
    $header = array();
    if ($field['visible_detail'] == 1) {
      $header['data'] = $field['field_name'];
      $header['display_name'] = $field['display_name'];
      $header['id'] = 'dvwcol' . $id_counter;
      
      if ($field['detail_title'] == 1) {
        $title = $field['field_name'];
      }  
      
      array_push($headers, $header);
      $id_counter++;
    }
  }
  
  $column_names = '';
  // Get the column names we need
  foreach ($headers as $header) {
    $column_names .= $header['data'] . ',';
  }

  $column_names = substr($column_names, 0, strlen($column_names) - 1);
  $sql = sprintf("SELECT %s FROM {%s} WHERE ImporterID=%s", $column_names, $table_name, $importerID);


  $result = db_query(db_rewrite_sql($sql));
  if ($row = db_fetch_array($result)) {
    foreach ($row as $key => $value) {
      $column_name = '';
      foreach ($headers as $header) {
        if ($header['data'] == $key) {
          $column_name = $header['display_name'];
          $db_name = $header['data'];
        }
      }

      // Sanitize $value, this is user-generated, uploaded in CSV file. 
      // We don't want to allow HTML, JS, etc.
      $value = check_plain($value);
      // If the user designated a field from the database as the title, 
      // display it on the detail page.  Otherwise, leave it as the default.
      if ((strlen($title) > 0) && $title == $db_name) {
        drupal_set_title($value);
      }
      
      $output .= '<div class="dvwDetail"><strong>' . $column_name . '</strong><p>' . $value . '</p></div>';
    }
  }

  $output .= '<div style="clear: both"/>';
  
  return $output;
}

function _datavizwiz_map($rows) {
  $markers .= sprintf("markers.addMarker(new OpenLayers.Marker(new OpenLayers.LonLat(%s,%s),icon.clone()));\n", $row['Longitude'], $row['Latitude']);
  _datavizwiz_add_javascript($markers);
}

function _datavizwiz_get_dataset_metadata($nid, $field_array) {
  $fields = implode(',', $field_array);
  $query = sprintf("SELECT %s FROM {dvw_field_meta} WHERE nid=%s", $fields, $nid);
  $sql = db_query($query);
  $rows = _datavizwiz_get_rowarray($sql);
  return $rows;
}

/**
 * Helper method to get columns in an imported data table.  
 * Note: drupal_schema_fields_sql won't work as the imported
 * tables are not part of Drupal's schema.
 * 
 * @param type $table_name 
 *  String.  Table name.
 */
function _datavizwiz_get_columns_in_table($table_name) {
  $dbname = _datavizwiz_get_database_name();
  
  // Run a query that will return no results to get the column names.
  $sql = db_query("SELECT column_name,ordinal_position,data_type 
    FROM {information_schema.columns}
    WHERE table_schema = '%s' and table_name like '{%s}'", $dbname, $table_name);
  
  return _datavizwiz_get_rowarray($sql);
}

/** 
 * Obtain the latitude and longitude columns as determined by user.
 * 
 * @param $nid
 *  Integer.  Node id.
 * @return
 *  Array.  Latitude and longitude column names.
 *  
 */
function _datavizwiz_get_latlon_cols($nid) {
  $query = db_query("SELECT fid, field_name, flag
    FROM {dvw_field_meta} 
    WHERE nid=%s AND (flag='%s' OR flag='%s')"
    , $nid, DVW_FLAG_LATITUDE, DVW_FLAG_LONGITUDE);
  return _datavizwiz_get_rowarray($query);
}

/**
 * Return only tables that created by Importer module (prefixed with "import_").
 * 
 * @return array 
 */
function _datavizwiz_get_import_tables() {
  $dbname = _datavizwiz_get_database_name();
    
  // Run a query that will return no results to get the column names.
  $sql = db_query("SELECT table_name 
    FROM {information_schema.tables}
    WHERE table_schema = '%s' and table_name like 'import\_%'", $dbname);

  return _datavizwiz_get_rowarray($sql);
}

function _datavizwiz_get_rowarray($dbquery) {
  $rows = array();
  while ($row = db_fetch_array($dbquery)) {
    array_push($rows, $row);
  }

  return $rows;
}

function _datavizwiz_get_summaryarray($dbquery) {
  $rows = array();

  while ($row = db_fetch_array($dbquery)) {
    $importerID = $row['ImporterID'];
    $row = array_slice($row, 1, count($row) - 1, TRUE);
    $keys = array_keys($row);
    $first_cell = $keys[0];
    $row[$first_cell] = '<a href="?detail=' . $importerID . '">' . $row[$first_cell] . '</a>';
    array_push($rows, $row);
  }

  return $rows;
}

function _datavizwiz_add_columns_to_meta_table($nid, $fields) {
  $i = -30;
  foreach ($fields as $field) {
    $data = array(
      'nid' => $nid,
      'field_name' => $field['column_name'],
      'display_name' => $field['column_name'],
      'order_summary' => $i,
      'order_detail' => $i,
    );

    drupal_write_record('dvw_field_meta', $data);
    $i++;
  }
}

function _datavizwiz_get_database_name() {
  global $db_url;
  $db_name = explode("/",$db_url);
  $dbname = $db_name[count($db_name)-1];
  return $dbname;
}

// Taken from Drupal 7
/*
 * 
 */
function _datavizwiz_drupal_get_query_parameters(array $query = NULL, array $exclude = array('q'), $parent = '') {
  // Set defaults, if none given.
  if (!isset($query)) {
    $query = $_GET;
  }
  // If $exclude is empty, there is nothing to filter.
  if (empty($exclude)) {
    return $query;
  }
  elseif (!$parent) {
    $exclude = array_flip($exclude);
  }

  $params = array();
  foreach ($query as $key => $value) {
    $string_key = ($parent ? $parent . '[' . $key . ']' : $key);
    if (isset($exclude[$string_key])) {
      continue;
    }

    if (is_array($value)) {
      $params[$key] = drupal_get_query_parameters($value, $exclude, $string_key);
    }
    else {
      $params[$key] = $value;
    }
  }

  return $params;
}

function _datavizwiz_get_querystring() {
  $query_parameters = _datavizwiz_drupal_get_query_parameters();

  $querystring = "";
  foreach ($query_parameters as $param => $value) {
    if (isset($value) && strlen($value)) {
      $querystring .= '&' . $param . '=' . $value;
    }
  }

  return $querystring;
}
